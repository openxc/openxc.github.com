---
layout: developer
title: Testing - OpenXC
---

<div class="page-header">
    <h1>Testing</h1>
</div>

<div class="alert alert-danger">
Please <strong>do not</strong> try to test your application while in
motion! Testing OpenXC apps while driving is absolutely a two person job.
</div>

<div class="page-header">
    <h2>Vehicle Simulator</h2>
</div>

The [OpenXC Vehicle
Simulator](https://github.com/openxc/openxc-vehicle-simulator){:target="_blank"} is a web
application intended for developers to run on local machines to generate a
simulated OpenXC vehicle data trace in real time, to be used for testing Android
applications.

Besides unit tests, the simulator is the recommended first step for testing your
application.

![Simulator Screenshot](/images/simulator-screenshot.png)

<div class="page-header">
    <h2>Pre-recorded Vehicle Data</h2>
</div>

The library ships with a method for playing back previously recorded vehicle
measurement trace files for testing. The [Measurement][] objects received
by your application are identical to those received from a live vehicle. The
vehicle simulator is generally a more flexible and easy to use option, but if
you have a specific driving scenario you wish to repeat multiple times, a trace
file is bets.

The trace file format is simply a plain text file of OpenXC JSON messages with
an additional timestamp field, separated by newlines:

    {"timestamp": 1351176963.426318, "name": "door_status", "value": "passenger", "event": true}
    {"timestamp": 1351176963.438087, "name": "fine_odometer_since_restart", "value": 0.0}
    {"timestamp": 1351176963.438211, "name": "brake_pedal_status", "value": false}
    {"timestamp": 1351176963.438318, "name": "transmission_gear_position", "value": "second"}

In fact, this is the same method used by some of the instrumentation tests. Once
you've created a file either by recording the output of the vehicle interface
module or building one by hand, copy it to your Android device's internal
storage or SD card. You can do this in one of three ways:

* Mount the Android device as USB disk.
* Use the File Manager from the Android Device Monitor (included with the
  Android SDK).
* Copy the file with `abd` on the command line:
    `$ adb push driving.json /sdcard/openxc-driving.json`

Install the [Enabler][enabler] app if you haven't already. That application
helps control the source of vehicle data, e.g. a USB vehicle interface or a
trace file.

Install a file manager in Android like the [OI File
Manager](http://caique.arvixe.com/~oi/filemanager){:target="_blank"} so the Enabler is able to browse
for files on the SD card.

Finally, run the `OpenXC Enabler` app on the device and go to `Settings -> Data
Sources -> Trace File Playback`, check the `Playback trace file` option and
browse for the trace file you copied over.

There are a [number of trace files available](/resources/traces.html).

<div class="page-header">
    <h2>OpenXC Vehicle Simulator</h2>
</div>
The [OpenXC Vehicle Simulator](https://github.com/openxc/openxc-vehicle-simulator) is a web application intended for developers to run
on local machines to generate a simulated OpenXC vehicle data trace in real
time, to be used for testing Android applications.

This is intended to compliment the Enabler's ability to play back a recorded
trace file.  The Simulator does not attempt to provide a high precision depiction
of a specific vehicle.  If an app requires a high degree of accuracy, debuging
should be done with a trace.  The Simulator provides real-time manipulation of
the data.  This allows the developer to create and change desired conditions in
real time.

The OpenXC Simulator creates vehicle data in the OpenXC format, simulating data
that comes from the OpenXC Vehicle Interface.  It simulates all of the signals in
the
[official OpenXC signal list](http://openxcplatform.com/vehicle-interface/output-format.html),
at the listed frequencies.  The Simulator also takes user input for the vehicle
controls.  (Pedals, steering wheel, etc.)  The generated data is displayed for
the user and sent to the Android host device via TCP connection.  The vehicle
dynamics model is simple.  It is modular, allowing for different vehicles, but
for the current version, accuracy is not be a priority. The point is not to
create data from a specific model and year, but rather to create plausible data
from a hypothetical car that can be used for debugging and demonstrations.

The user interface is not a driving simulator, merely a list of controls.
Controls include sliders for pedals and the steering wheel, various radio
buttons and switches for other controls, etc.  Vehicle controls include
everything needed to generate the above list of vehicle data, including doors
and lights.  While the fastest OpenXC signal is 60Hz, the physics model iterates
at 100Hz to produce plausible data for things like the torque and engine speed.
The world outside the car is currently assumed to be a flat, featureless sphere,
solely for the purpose of generating GPS data.

The core of the simulator is python running a local web server through
[Flask](http://flask.pocoo.org/docs/installation).  The user interface is
accessed through a web browser pointed at localhost.  The simulator also listens
for incoming network connections from the OpenXC Enabler, running on an Android
device.

**Installing the Simulator**

Once you've cloned the repository, install the Python Flask dependencies with
`pip`:

      $ pip install -r pip-requirements.txt

If that fails due to lack of permissions, there are a few options.  One is to
use [VirtualEnv](https://pypi.python.org/pypi/virtualenv) as described in the
[Flask installation documentation.](http://flask.pocoo.org/docs/installation/)
Another option is to run the install with sudo:

      $ sudo pip install -r pip-requirements.txt

**Running the Simulator**

To run the app:

      $ ./emulate.py

To open the UI, open a browser and navigate to http://localhost:50000/

<img title="OpenXC simulator screnshot" src="/images/simulator/simulator-screen-shot.png" height="900px" width="450px"/>

To connect with an Android device, open the Enabler activity, open the settings,
choose Data Sources, and enable "Use a network device".

Set the host address to the address of the machine running emulate.py, and set
the port to 50001. You may need to disable and re-enable "Use a network device"
after entering the correct information. The terminal running emulate.py should
indicate that it received a new connection.

<img title="OpenXC simulator enabler configuration" src="/images/simulator/enabler_simulator_screenshot.png" height="600px" width="300px"/>

If the Enabler fails to connect, you may need to use a different IP address.
The python address detection isn't perfect, and multiple IPs on a computer can
confuse it.  When emulate.py is started, it displays a list of IPs on which it
listens for connections from the OpenXC Enabler.

<div class="page-header">
    <h2>Button Events</h2>
</div>

Unfortunately the Android emulator does not allow us to send arbitrary events
from button presses without editing the source. In order to test your button
event handlers, the recommended method is to write them in such a way that they
can accept either VehicleButtonEvents or regular Android key events as input.
You may want a flag to disable the Android key events when running in
production.

For example, the OpenXC specification includes a signal for a D-pad style
controller. The 2012 Ford Focus has such a controller on the steering wheel.
The Android emulator will send `KEYCODE_DPAD_*`
[KeyEvents](http://developer.android.com/reference/android/view/KeyEvent.html)
when you press the arrows on your computer's num pad. These are a good parallel
and it should be simple to have your event handlers watch for *either* the
vehicle D-pad event or the Android event.

Here's an example - if you want your application to send a text message when the
user presses the down button on the steering wheel, write a function that
performs the action:

{% highlight java %}
public void sendTextMessage() {
    // send a text message
    ...
}
{% endhighlight %}

To hook this up to Android `KeyEvent`, define an `onKey` method in your
activity:

{% highlight java %}
@Override
public boolean onKeyDown(int i, KeyEvent event) {
    if (i == KeyEvent.KEYCODE_DPAD_DOWN) {
        sendTextMessage();
        return true;
    }
    super.onKeyDown(i, event);
    return true;
}
{% endhighlight %}

This connects your functionality to the virtual button in the Android emulator.
To have this actually work in the car, you need to register a handler for the
VehicleButtonEvent.

{% highlight java %}
VehicleButtonEvent.Listener listener = new VehicleButtonEvent.Listener() {
    public void receive(VehicleMeasurement measurement) {
        final VehicleButtonEvent event (VehicleButtonEvent) measurement;
        if(event.getAction() ==
                    VehicleButtonEvent.ButtonAction.PRESSED,
                && event.getValue() ==
                    VehicleButtonEvent.ButtonId.DOWN) {
            sendTextMessage();
        }
    }
}
{% endhighlight %}

<div class="page-header">
    <h2>UI Design</h2>
</div>

User interface design for automotive environments is increasingly attracting
attention, particularly due to concerns with [driver
distraction](http://www.distraction.gov/). While building your OpenXC
application, keep in mind the U.S. government's recently released [guidelines
(PDF)](http://www.nhtsa.gov/staticfiles/rulemaking/pdf/Distraction_NPFG-02162012.pdf)
for application design.

Driver distraction aside, the most useful and interesting applications tend to
be those without much driver interaction. The more you can automate or let the
user deal with outside of their vehicle, the better the experience will likely
be.

[gg]: http://groups.google.com/group/openxc
[Enabler]: /android/getting-started.html#enabler
[vehicle interface]: /vehicle-interface/hardware.html
[Measurement]: http://android.openxcplatform.com/reference/com/openxc/measurements/Measurement.html
[VehicleManager]: http://android.openxcplatform.com/reference/com/openxc/VehicleManager.html
