---
layout: about
title: FAQ - OpenXC
---

<div class="page-header">
    <h1>Frequently Asked Questions</h1>
</div>

<dl>

<dt>Who can I contact at Ford about OpenXC?</dt>
<dd><p>
The code has been released on GitHub and you don't need any special permission
or agreements from Ford to use OpenXC. A number of Ford engineers participate in
the <a href="http://groups.google.com/group/openxc">OpenXC Google Group</a>, that's a good
first stop.

<p>If you wish to use Ford's expanded data set,
you will need to sign a developer agreement to get access to the <a
href="/hardware/vehicles.html">binary vehicle interface firmware</a>.
</p>

<dt>Why not just use one of the many commercial OBD-II scanners instead of
OpenXC?</dt>

<dd>

<p>You want to use OpenXC because it offers a superset of features compared to
off-the-shelf tools. OpenXC connects to the OBD-II port, and you have the option
of using standard OBD-II diagnostic messages like every other scanner and
dongle, but it's also *entirely open source* and is flexible enough to support
more advanced CAN bus development (e.g. "normal mode" CAN) and reverse
engineering.

<p>OBD-II has the advantage of being a standard across all vehicles
sold in North America since 1996, but the standard message set primarily
concerns the emissions powertrain. The rest of the diagnostic messages are
non-standard and not available to the public (and certainly not an open source
project). <a href="http://www.autoenginuity.com/products-software.html#EI01">
AutoEnginuity</a>, an OBD-II scanner manufacturer explains it well:
</p>

<blockquote>
Although Ford does implement the largest subset of the OBD-II standard, the
typical vehicle only supports 20 - 40 sensors and is limited to emissions
powertrain.
</blockquote>

<p>
This situation is not unique to Ford - the majority of OBD-II PIDs are
non-standard.
</p>

<p>
In "normal mode", the OpenXC vehicle interface listens passively to the many CAN
messages already flying across the buses that include data not covered by the
OBD-II standard. OpenXC provides automakers with a ready-built platform to
selectively grant access to this data, and it provides hobbiysts with the tools
required to reverse engineer the data for themselves.
</p>

<p>
The most important difference between OpenXC and existing tools is the standard
programming language and OS agnostic
 <a href="https://github.com/openxc/openxc-message-format">output</a> sent via USB.
The reference host device is <a href="/android/index.html">Android</a>, but
there's no reason you couldn't use a laptop with another programming environment
(see all supported <a href="/host-devices/index.html">host devices</a>).
</p>

<a href="http://en.wikipedia.org/wiki/OBD-II_PIDs#Non-standard_PIDs">Source</a>

<dt>How does the data from OpenXC compare to the standard OBD-II messages?</dt>

<dd>
<p>OpenXC provides strictly more data than OBD-II, since the standard diagnostic
messages are supported by the <a href="/vehicle-interface/firmware.html">open
source firmware</a>.</p>

<p>The data available in extended mode is determined by what an automaker
releases, and what a developer is able to decipher on their own. OpenXC relies
on "normal mode" CAN messages, and more sensors may be available than what is
exposed in the OBD-II message set.</p>

<p>One good example is measuring the amount of fuel consumed, for the purposes
of calculating fuel economy. The OBD-II set provides the mass airflow, from
which you can <a
href="http://www.mp3car.com/engine-management-obd-ii-engine-diagnostics-etc/75138-calculating-mpg-from-vss-and-maf-from-obd2.html">calculate</a>
how much fuel is consumed. When you can take advantage of proprietary sensor
data, this can be much easier and potentially more accurate - e.g. with Ford's
OpenXC binaries you can retrieve the amount of fuel consumed directly (at 25
microliter resolution). </p>

<p>For more information on the types of CAN messages, see the <a
href="/vehicle-interface/concepts.html">On-Board Diagnostics</a> section.</p>

</dd>

<dt>Why wouldn't I just use one of the inexpensive smartphone apps that connect
to a cheap OBD-II Bluetooth adapter?</dt>

<dd>

<p>
Smartphone apps like Torque are great, but most don't provide any programming
interface for you to create new applications. OpenXC is not intended to be a
"dashboard" application that you install and use - it's a platform for others to
make custom applications that take advantage of vehicle data.
</p>

<p>There is actually no reason why existing OBD-II adapters couldn't work with
the Android library (ongoing work in <a
href="https://github.com/openxc/openxc-android/issues/19">this issue</a>), though
the performance of some cheap adapters can be poor, and some have been known to
drain car batteries.</p>

</dd>

<dt>Why does OpenXC use a separate device to connect to the vehicle instead of
integrating it into the host device (Android or PC)?</dt>

<dd>Most consumer level devices don't have the hardware necessary to connect to
a car's CAN bus, namely CAN controllers and transceivers.

Additionally, few if any vehicle manufacturers release their CAN message
definitions. If the translation from proprietary vehicle messages to the
standard OpenXC equivalents was performed in the same environment as third-party
applications, it could be more vulnerable to reverse engineering. The strict
physical separation of translation from user code provides stronger assurance
that the message definitions will remain private, and the CAN bus will be
protected from malicious writes from bad applications.</dd>
