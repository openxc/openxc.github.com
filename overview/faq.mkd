---
layout: default
title: FAQ - OpenXC
---

<div class="page-header">
    <h1>Frequently Asked Questions</h1>
</div>

<dl>

<dt>Who can I contact at Ford about OpenXC?</dt>
<dd><p>
The code has been released on GitHub and you don't need any special permission
or agreements from Ford to begin developing an Android application and using
the emulator. If you wish to use your application in an actual Ford vehicle,
you will need to sign a developer agreement to get access to the <a href="/vehicle-interface/firmware.html">vehicle
interface firmware</a>.
</p></dd>

<dt>Why not just use one of the many commercial OBD-II scanners instead of
OpenXC?</dt>

<dd>

<p> Certainly, OBD-II has the advantage of being a standard across all vehicles
sold in North America since 1996, but the standard message set primarily
concerns the emissions powertrain. The rest of the diagnostic messages are
non-standard and not available to the public (and certainly not an open source
project). <a href="http://www.autoenginuity.com/products-software.html#EI01">
AutoEnginuity</a>, an OBD-II scanner manufacturer explains it well:
</p>

<blockquote>
Although Ford does implement the largest subset of the OBD-II standard, the
typical vehicle only supports 20 - 40 sensors and is limited to emissions
powertrain.
</blockquote>

<p>
This situation is not unique to Ford - the majority of OBD-II PIDs are
non-standard.
</p>

<p>
OpenXC connects to the OBD-II port, but it does not currently get data from
OBD-II diagnostic messages. The OpenXC vehicle interface listens passively to the
many CAN messages already flying across the buses that include data not covered
by standard OBD-II messages. This includes nearly every sensor on vehicle, but
they are unfortunately non-standard as well. It's up to each auto company to
decide how much access they grant by either providing the CAN message
definitions or a pre-compiled OpenXC translator binary.
</p>

<p>
The most important difference between OpenXC and existing tools is the standard
programming language and OS agnostic
 <a href="/vehicle-interface/output-format.html">output</a> sent via USB.
The reference host device is <a href="/android/index.html">Android</a>, but
there's no reason you couldn't use a Windows or Linux laptop with a USB port
(i.e. any of them). A port of the
 <a href="/android/api-guide.html">openxc-android</a> library to Python or
plain old (non-Android) Java would be a great addition to the project.
</p>

<a href="http://en.wikipedia.org/wiki/OBD-II_PIDs#Non-standard_PIDs">Source</a>

<dt>How does the data from OpenXC compare to the standard OBD-II messages?</dt>

<dd>
<p>The answer to this is specific to the vehicle manufacturer and the OpenXC
binaries they provide. OpenXC relies on "normal mode" CAN messages, and more
sensors may be available than what is exposed in the OBD-II message set.</p>

<p>One good example is measuring the amount of fuel consumed, for the purposes
of calculating fuel economy. The OBD-II set provides the mass airflow, from
which you can <a
href="http://www.mp3car.com/engine-management-obd-ii-engine-diagnostics-etc/75138-calculating-mpg-from-vss-and-maf-from-obd2.html">calculate</a>
how much fuel is consumed. When you can take advantage of proprietary sensor
data, this can be much easier and potentially more accurate - e.g. with Ford's
OpenXC binaries you can retrieve the amount of fuel consumed directly (at 25
microliter resolution). </p>

<p>For more information on the types of CAN messages, see the <a
href="/vehicle-interface/concepts.html#obd">On-Board Diagnostics</a> section.</p>

</dd>

<dt>Why wouldn't I just use one of the inexpensive smartphone apps that connect
to a cheap OBD-II Bluetooth adapter?</dt>

<dd>

<p>
Smartphone apps like Torque are great, but most don't provide any programming
interface for you to create new applications. OpenXC is not intended to be a
"dashboard" application that you install and use - it's a platform for others to
make custom applications that take advantage of vehicle data.
</p>

<p> There is actually no reason why existing OBD-II adapters couldn't work with
the Android library (ongoing work in <a
href="https://github.com/openxc/openxc-android/issues/19">this issue</a>). Do
keep in mind that the data available through the OBD-II standard is limited
compared to the OEM provided OpenXC firmware binaries, and the performance of
some cheap adapters can be poor. </p>

</dd>

<dt>Why does OpenXC use a separate device to connect to the vehicle instead of
integrating it into the host device (Android or PC)?</dt>

<dd>Very few if any vehicle manufacturers release their CAN message definitions. If
the translation from proprietary vehicle messages to the standard OpenXC
equivalents was performed in the same environment as third-party applications,
it could be more vulnerable to reverse engineering. The strict physical
separation of translation from user code provides stronger assurance that the
message definitions will remain private, and the CAN bus will be protected from
malicious writes from bad applications.</dd>

<dt>How do I connect my host device to the web when I'm not near a Wi-Fi access
    point?</dt>
<dd>
The device we recommend, the Toshiba Thrive, doesn't have 3G built-in. On the
positive side, this means that the tablet is quite inexpensive even without a
contract with a wireless provider. On the downside, it only connects to Wi-Fi
for Internet and 3G dongles aren't well supported in Android as of 3.1. You're
not out of luck, though - we recommend buying a 3G Wi-Fi hotspot from your
preferred wireless provider like the MiFi and connecting your host device to
this over Wi-Fi. Simple and flexible.

If you'd like to use an Android tablet with 3G built-in (like the Samsung Galaxy
Tab from Verizon), that should work, too.
</dd>


</dl>
