---
layout: hardware
title: Vehicle Interface - OpenXC
redirect_from:
    - /developers/vehicle-interface/assembly.html
    - /developers/vehicle-interface/hardware.html
    - /vehicle-interface/
---

<div class="page-header">
    <h1>Supported Vehicle Interfaces</h1>
</div>

The Vehicle Interface (VI) is piece of hardware that connects
to the car's CAN bus, translates proprietary CAN messages to the standard
[OpenXC message format][output-format] and sends the output over USB, Bluetooth,
or 3G/Ethernet/WiFi to a [host device][].

<h2 class="anchored" id="obd-pins"><a href="#obd-pins">CAN Buses on OBD Pins</a></h2>

The OBD-II port has one standard pin pair for a single CAN bus, but many
automakers expose other buses on additional, non-standard pin pairs. For this
documentation, we'll use this nomenclature:

<div class="well">
<table cellpadding="5">
<thead>
<tr><th>OBD-II Pin Pair</th><th>OpenXC Bus Name</th><th>Other common name</th></tr>
</thead>
<tbody>
<tr>
    <td>6 (+) and 14 (-)</td>
    <td>CAN1</td>
    <td>CAN high / CAN low from ISO 15765-4 and SAE-J2284</td>
</tr>
<tr>
    <td>3 (+) and 11 (-)</td>
    <td>CAN2-1</td>
    <td>Ford secondary, Chrysler CCD</td>
</tr>
<tr>
    <td>1 (+) and 8/9 (-)*</td>
    <td>CAN2-2</td>
    <td>Ford: infotainment, GM: J2411</td>
</tr>
<tr>
    <td colspan="3">* If available, Pin 8 on Ford B, C platforms and Pin 9 on Ford D platforms. This is typically not available. </td>
</tr>
</tbody>
</table>
</div>

Most vehicle data is available from CAN1, and all vehicle interfaces connect
to that bus. Some data is available only on CAN2-1 or CAN2-2, and
these buses are not connected to all available VIs (see below). To find out
if the information you need is on a bus connected by a particular VI, check the
[binary firmware](/vehicle-interface/firmware.html) documentation for your
vehicle manufacturer.

<h2 class="anchored" id="obtaining-a-vehicle-interface"><a href="#obtaining-a-vehicle-interface">Obtaining a Vehicle Interface</a></h2>

<div class="alert alert-danger">
<strong>Note:</strong> Unless you have a specific need for Cellular (C5 Cellular), iOS (C5 BLE), or SD Card logging (C5 BT, C5 Cellular)
it is recommended that you use the <a href="#ford-reference-design"><strong>Ford Reference VI</strong></a>. It is most reliable platform. 
The C5 devices are available to provide the specific new functionality. 
</div>

There are two ways you can obtain a vehicle interface.

* Purchase a Pre-Made VI: The <a href="#ford-reference-design">Ford Reference VI</a>
and <a href="#crosschasm">CrossChasm C5 Vehicle Interfaces</a> are all available for purchase
at the [OpenXC Shop](http://shop.openxcplatform.com/).

* <a href="#diy-chipkit">Build one yourself!</a> The original OpenXC design
was built on a chipKIT development board and is still fully supported. The
design is open-source and posted below, along with instructions on how to assemble
all the required parts.

This image shows all of the available devices that are described below.

![All Devices](/images/all-devices.jpg)

<h2 class="anchored" id="ford-reference-design"><a href="#ford-reference-design">Ford Reference VI</a></h2>

The VI is a open source reference design for a "dongle" style vehicle interface
that connects directly to the diagnostic port with no cable. Ford created this
design and manufactured a small quantity to seed the developer community. If you
have an idea for an OpenXC application and this hardware would help,
you can [buy the hardware](http://shop.openxcplatform.com)

![Ford Reference VI](/images/ref-vi-new.jpg)

The reference VI is not as compact as the [C5 BT](#crosschasm), but it is open
source hardware, so you are free to use or modify this design in your own
hardware, and it connects to both the CAN1 and CAN2-1 [bus pins](#obd-pins) (and
with a small modification can connect to CAN2-2).

* [Reference VI Binary Firmware Programming
  Instructions](http://vi.openxcplatform.com/firmware/programming/usb.html)
* [Reference VI Documentation and Schematics](http://vi.openxcplatform.com/)

<h2 class="anchored" id="crosschasm"><a href="#crosschasm">CrossChasm C5 Devices</a></h2>

There are three types of Vehicle Interfaces made by CrossChasm that are available. They
are all similar and based off the same PIC32 platform. The first is a Bluetooth
Classic, the second is a 3G Cellular device, and latest is a Bluetooth LE device. See
the table below or 
[vi-firmware](http://vi-firmware.openxcplatform.com/en/master/platforms/crosschasm-c5.html)
for more complete details.

* [C5 Binary Firmware Programming Instructions](http://vi-firmware.openxcplatform.com/en/master/_static/QuickStart%20guide%20to%20using%20C5%20Hardware%20and%20OpenXC.pdf)
* [CrossChasm C5 Documentation](http://vi-firmware.openxcplatform.com/en/latest/platforms/crosschasm-c5.html)

All of the CrossChasm devices are available at the 
[OpenXC Shop](http://shop.openxcplatform.com).

<h3 class="anchored" id="crosschasm-c5-bt"><a href="#crosschasm-c5-bt">CrossChasm C5 BT</a></h3>

The C5 BT is a very compact interface, so it's great for fleet deployments. It
connects to the [CAN1 bus pins](#obd-pins) only. A crossover
cable is needed to access a secondary CAN bus.

![CrossChasm C5 BT](/images/c5-bt.jpg)

<h3 class="anchored" id="crosschasm-c5-cellular"><a href="#crosschasm-c5-cellular">CrossChasm C5 Cellular</a></h3>

The C5 Cellular device allows a direct GSM connection with a user supplied SIM card. The 
device also has it's own built in GPS receiver (Telit HE910). The C5 Cellular does not 
plug directly into the OBD-II port, but instead has an OBD-II to DB9 cable to allow 
placement of the device  or good reception as well as the ability to put the larger 
device out of the way.

![CrossChasm C5 Cell](/images/c5cell-top.jpg)
![CrossChasm C5 Cell](/images/c5cell-side.jpg)
<!--![CrossChasm C5 Cell](/images/c5cell-antenna.jpg)-->

Like the C5 BT, the supplied cable connects to CAN1. In order to connect to CAN2-1 (or
other), a cable that connects the DB9 pins 4 & 6 to the desired OBD-II pins 
(instead of 12 & 13). The image below shows the default cable pinout.

![CrossChasm OBD-II to DB9 Pinout ](/images/crosschasm-obd2-db9-pinout.png)

<h3 class="anchored" id="crosschasm-c5-ble"><a href="#crosschasm-c5-ble">CrossChasm C5 BLE</a></h3>

The C5 BLE device is the exact same size as the C5 BT. It swaps the BT for a BLE interface,
which makes it the VI of choice for iOS applications. The OpenXC iOS framework is coming soon.
The other differences for the C5 BLE is that there is no SD card reader and the OBD-II 
connections are updated to **connect to both CAN1 and CAN2-1**.

The easiest way to differentiate a C5 BT from a C5 BLE device is that the BLE device has all
OBD-II pins populated while the BT has only a subset of pins. A second difference is the lack
of a receiving slot in the SD card reader hole in the plastic housing on the BLE device. Or, you
could always label them!

![CrossChasm C5 BLE](/images/c5-ble-pins.jpg)

<h2 class="anchored" id="diy-chipkit"><a href="#diy-chipkit">DIY chipKIT-based VI</a></h2>

<div class="row">
    <div class="col-md-4">
        <img class="img-responsive" title="VI with Enclosure"
            alt="VI with Enclosure" src="/images/cantranslator-boxed-vertical.jpg"/>
    </div>
    <div class="col-md-4">
        <img class="img-responsive" title="VI with Cable"
            alt="VI with Cable" src="/images/cantranslator-with-plug.jpg"/>
    </div>
</div>

This VI design was the first OpenXC interface, and is still fully supported by
the latest VI firmware. The design uses entirely off-the-shelf
components, built on top of a Digilent chipKIT Max32 development board (open
source hardware!). The VI can be assembled with a range of functionality
starting at around $110, with no soldering required.

The chipKIT VI can connect to up to 2 CAN buses simultaneously, and you can
choose from any of [CAN1, CAN2-1 or CAN2-2](#obd-pins).

* [chipKIT Binary Firmware Programming
  Instructions](http://chipkit-vi.openxcplatform.com/firmware/programming.html)
* [chipKIT-based OpenXC Vehicle Interface Documentation](http://chipkit-vi.openxcplatform.com/)

<h2 class="anchored" id="comparison-table"><a href="#comparison-table">Comparison Table</a></h2>

The table below compares the different features of the available VIs. 

![VI Comparison Table](/images/vi-comp-table.png)

<h2 class="anchored" id="other-implementations"><a href="#other-implementations">Other Implementations</a></h2>

There are many possible implementations of a VI. The minimal functional
requirements are that the VI:

* Physically connects to the [OBD-II diagnostic
  connector](http://en.wikipedia.org/wiki/On-board_diagnostics#OBD-II_diagnostic_connector){:target="_blank"}
  directly or with a cable.
* Connects a CAN controller to at least the US federally mandated CAN bus pins.
* Runs the open source [VI firmware](https://github.com/openxc/vi-firmware){:target="_blank"}.
* can be reprogrammed the end user without additional hardware (most likely via
  a USB or serial bootloader).

Optionally, the VI may:

* Connect another CAN controller to non-standard CAN bus pins (such as Ford's medium
  speed or infotainment bus pins)
* Allow lower-level user re-programming and debugging via ISP or JTAG.
* Pass 12v power from the vehicle through to a separate power jack for
  peripherals

Unless you are implementing custom CAN messages, you will most likely need a
[pre-built OpenXC binary firmware](/vehicle-interface/firmware.html) from the
manufacturer of your vehicle. Each OEM can decide whether or not to participate
in OpenXC and if so, decide which types of data they wish to expose.

<div class="page-header">
<h2 class="anchored" id="next-steps"><a href="#next-steps">Next Steps</a></h2>
</div>

Once you've purchased or constructed a vehicle interface, you can [get started
with one of the programming environments](/getting-started/index.html) to make
sure it's working correctly. Both the Python and Android environments have a
"smoke test" you can use without writing any code.

[output-format]: https://github.com/openxc/openxc-message-format
[host device]: /host-devices/hardware.html
[can]: http://en.wikipedia.org/wiki/CAN_bus
[obd2]: http://en.wikipedia.org/wiki/On-board_diagnostics
