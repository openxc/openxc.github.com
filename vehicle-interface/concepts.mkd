---
layout: default
title: Vehicle Interface Concepts - OpenXC
---

<div class="page-header">
<h1>Concepts</h1>
</div>

<h2>CAN Bus</h2>

Modern automobiles are laced with a number of microcontrollers and sensors that
monitor and control everything from the throttle position to the ambient air
temperature. These devices communicate with each other over a wired in-vehicle
network, a [CAN bus][can].

![In-vehicle Network](/images/can-diagram.png)
*(Creative Commons, Ford Motor Company)*

Compared to something like the network of the Internet, CAN is relatively simple
and low-level. CAN buses have 2 wires, and vehicles typically have two or three
CAN buses running at speeds ranging from 125Kbps to 500Kbps. The protocol used
to send data between nodes on the network is roughly equivalent to a link layer
protocol like MAC or ARP. It's a broadcast network and only one node can send
data at a time. It handles message priorities at the bit level which makes it a
good choice for vehicle networks, when you absolutely, positively, **must** make
sure the brake pedal status is sent.

<h3>CAN Data Format</h3>

CAN network traffic is organized into frames (or messages) that have:

* an 11 bit identifier
* up to 64 bits of data

Within the 64 bits of data of each **CAN message** there are typically multiple
data points, e.g. the steering wheel angle, a quality factor for the sensor, the
center point of the steering wheel, etc. Each of these bit fields is known as a
**CAN signal**.

![CAN Message and Signal Diagram](/images/can-message.png)

The exact format of these bit fields and messages are typically considered
sensitive information by vehicle manufacturers. The OpenXC VI allows these
companies to keep that information private, but still give consumers and
developers access to the data contained within. Even for engineers inside the
companies, dealing with a standard data format across many vehicles is often
preferable to keeping track of a database of CAN message and signal definitions.



The CAN bus is one of the primary components of [OBD-II][obd2], a vehicle
diagnostic standard mandatory for all cars sold in the United States since 1996.
The OBD-II standard sends and receives messages on the CAN bus. If you've ever
watched your mechanic plug a tool in somewhere underneath your steering wheel,
or seen a vehicle monitoring app for your smartphone, that's OBD-II in action.
You'll always find the port by the driver's knees.

![OBD-II Port with Cable in a Mustang](/images/obd-ii-cable.jpg)

This means that every vehicle in the United States has a very accessible place to connect to the same network used by all of the vehicle's subsystems. That's where OpenXC comes in - with some knowledge of how to process the messages on the network, you can start to get valuable data out of your car.

<h2 id="obd">
<a href="#obd">On-Board Diagnostics</a>
</h2>

Diagnostic messages work slightly differently than the CAN messages used by all
other in-vehicle systems. When you turn on your car, the CAN bus is very busy
with so-called "normal" messages. For example, the engine control unit (ECU)
continuously sends a CAN message with the engine speed (in RPM). The cluster
listens for this message on the bus and updates the tachometer arm when it
receives a new value. The cluster doesn't have to query for anything.

Conversely, diagnostic messages use a request/response style. When you attach an
off-the-shelf OBD-II scan tool, it sends specially formatted diagnostic command
messages over the CAN bus. Nodes on the network that can output diagnostic
information are listening for these messages, and send out the requested status
information over CAN when asked. There's no point in sending these messages when
nothing is attached and capable of interpreting the results, so these messages
are not sent continuously to minimize the level of traffic on the network.

The diagnostic request protocol is relatively standard across vehicle
manufacturers, but beyond the standardized (and mandated) [OBD-II
parameters](http://en.wikipedia.org/wiki/OBD-II_PIDs), the diagnostic message
identifiers and formats are also largely proprietary.

[output-format]: /vehicle-interface/output-format.html
[host device]: /android/index.html
[can]: http://en.wikipedia.org/wiki/CAN_bus
[obd2]: http://en.wikipedia.org/wiki/On-board_diagnostics
