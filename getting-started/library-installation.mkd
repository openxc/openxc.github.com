---
layout: default
title: Library Setup - OpenXC
---

<div class="page-header">
    <h1>Setting up your Environment</h1>
</div>

<div class="pull-right well">
    <ul class="nav nav-list">
        <li class="nav-header">Next Step</li>
        <li><a href="/getting-started/tutorial.html">
            App Tutorial <i class="icon-arrow-right"></i>
        </a></li>
    <p></p>
    </ul>
</div>

The OpenXC functionality is exposed via a Java library that includes some
Android services your application can use. The library is available on GitHub in
the [openxc-android][] repository and also in the central Maven repository.

There is a [screencast walkthrough](http://www.youtube.com/watch?v=4uelN6Km_CI)
of the complete installation and OpenXC app tutorial on YouTube.

<div class="page-header">
    <h2>Android Library Installation</h2>
</div>

You can choose to develop with OpenXC via [Eclipse](#eclipse) or the [command
line](#cli) with Maven. You also need to install the [Enabler](#enabler)
application to your device - it takes care of a lot of boilerplate, so your
app's code can be simpler.

<div class="page-header">
    <h3 id="eclipse"><a href="#eclipse">Using Eclipse</a></h3>
</div>

Follow Google's [excellent
directions](http://developer.android.com/sdk/index.html) to install the Android
Developer Tools (ADT), which includes the Android SDK, Eclipse and the Android
plugin for Eclipse. Make sure you also install the latest [Android platform
version](http://developer.android.com/sdk/installing/adding-packages.html) and
any additional platform versions that you wish to target. You may also need the
latest [Java
JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html).

<div class="alert alert-error">
If you are running 64-bit Ubuntu you will need to install the ia32-libs package.
Other 64-bit Linux distributions will need to use their package managers to
install the correct 32-bit libraries.
</div>

<div class="alert alert-error">
If you use an Internet proxy, you will need to configure the proxy settings in
the Android SDK manager (in `Tools -> Options`).
</div>

Get the [openxc-android][] source code in one of two ways:

* *Recommended method:* The latest stable version of the OpenXC Android source code
can always be found [here](https://github.com/openxc/openxc-android/releases). 
Make sure to download both the source code as well as the OpenXC Enabler App .apk. 
There is also an example application available for your reference. Extract the 
files to the location where you'd like the library to sit on your local computer.

* *Other Options:* Clone the [openxc-android][] repository using Git. If you
  don't already have Git installed, GitHub has a [good
  reference](https://help.github.com/articles/set-up-git) for all platforms.
  This method gets you the most up-to-date changes in the OpenXC library, but might not be as stable. 
  You can also download the latest version from [GitHub][openxc-android] as a ZIP file.
  Look for the big ZIP icon like the example below).

<a href="https://github.com/openxc/openxc-android">
<img src="/images/screenshots/github.png" />
</a>

After obtaining a copy of the `openxc-android` repository, open Eclipse
and go to `File -> New -> Other -> Android -> Android Project from Existing
Source`. Browse to the `openxc-android` folder and it should detect the 4
Android projects within the repository. Unless you will be working on the
internals of the OpenXC library itself, you can uncheck the `openxc-it` testing
project. Click `Finish` to add the projects.

![Adding a Project in Eclipse](/images/screenshots/eclipse-import.png)

Wait a few seconds for Eclipse to build the projects. If you get errors in the
projects about a required compliance level, you can fix this by right-clicking on the errored project,
and going to `Android Tools -> Fix Project Properties`. Otherwise, there should be no errors
reported. If you still have errors, try asking in the [Google Group](/overview/discuss.html) for some help.



<div class="page-header">
    <h3 id="cli"><a href="#cli">Using the Command Line</a></h3>
</div>

If you prefer to compile and deploy from the command line, you can use
[Maven](http://maven.apache.org/download.cgi). Using Maven is out of the scope
of this documentation, so this is only recommended if you already know how to
use Maven. The OpenXC repository has the required `pom.xml` files to use it has
a library.

The OpenXC library artifact is available in the central Maven repository, so you
just need to add this to your `dependencies` section:

{% highlight xml %}
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.openxcplatform</groupId>
            <artifactId>openxc</artifactId>
            <version>3.0</version>
            <type>apklib</type>
        </dependency>
        ...
    </dependencies>
    ...
</dependencyManagement>
{% endhighlight %}

You also need to add the
[android-maven-plugin](http://code.google.com/p/maven-android-plugin/) so that
the `apklib` type is supported:

{% highlight xml %}
<build>
    <pluginManagement>
        <plugins>
            <plugin>
                <groupId>com.jayway.maven.plugins.android.generation2</groupId>
                <artifactId>android-maven-plugin</artifactId>
                <version>3.3.0</version>
                <extensions>true</extensions>
            </plugin>
        </plugins>
        ...
    </pluginManagement>
    ...
</build>
{% endhighlight %}



<div class="page-header">
    <h2 id="enabler"><a href="#Enabler">Enabler</a></h2>
</div>

The best way to make the USB vehicle interface available to your app is to
install the OpenXC Enabler app - the [source][enabler-source] for this app is in
the [openxc-android][] repository.

This app starts the vehicle service at boot and makes sure it stays alive - this
way, your app doesn't have to worry about USB permissions or reacting to device
detachment/reattachment.

If you don't want to use the enabler app, it's certainly possible to start the
service from your application directly. Look at the [source for the
enabler][enabler-source] to see exactly how to accomplish that.

<div class="alert alert-error">
<strong>Note:</strong> Even if you only plan to use previously recorded trace
files and don't need to connect to a physical vehicle interface, the Enabler app
still must be installed.
</div>

There are three recommended ways to install the Enabler:

**APK**

The latest version of the Enabler is available as an [APK][], ready to install in
Android.

**Eclipse**

If you have the `OpenXcEnablerActivity` project imported in Eclipse, right click
on the project and select `Run As -> Android Application` with an Android device
attached to install the app.

**Maven**

If you're using Maven at the command line:

{% highlight sh %}
$ mvn clean install -pl openxc -am && mvn clean package android:deploy android:run -pl enabler
{% endhighlight %}



<div class="page-header">
<h2>Other Required Software</h2>
</div>
Throughout the setup process, you'll need to pull in a few packages in order to both flash
firmware to your Vehicle Interface, as well as test the interface to make sure it's working.
This will require Cygwin (on Windows) or Homebrew (on Mac). Linux users will be able to pull
in the required packages right off the command line.

<h3>Windows</h3>
<ol>
    <li>Download the <strong>32-bit</strong> setup file for <a href=http://www.cygwin.com>Cygwin</a>.</li>
    <li>Run the Cygwin installer. The Cygwin installer lets you specify additional packages you'd like to include with your 
        Cygwin installation. Make sure to include all of the following packages:
        <ul>
            <li>git</li>
            <li>curl</li>
            <li>libsas12</li>
            <li>ca-certificates</li>
            <li>patchutils</li>
            <li>python</li>
            <li>python-setuptools</li>
            <li>libusb-win32</li>
        </ul>
    </li>
    <li>Install the OpenXC Python library via Cygwin using the following command: <strong>sudo easy_install -U openxc</strong>.
    See <a href=http://python.openxcplatform.com/en/latest/#installation>
    the Python documentation</a> for more information.</li>
</ol>

<h3>Mac OS X</h3>
<ol>
    <li>Open a terminal window, then install the Python OpenXC library using easy_install: <strong>sudo easy_install -U openxc</strong>.
     See <a href=http://python.openxcplatform.com/en/latest/#installation>
    the Python documentation</a> for more information.</li>
    <li>Install <a href="mxcl.github.com/homebrew/">Homebrew</a> (A package manager for OS X) using the following command: 
        <strong>ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"</strong>.</li>
    <li>Using Homebrew, install the USB Backend used to connect a Vehicle Interface to your computer via USB. You can do this
    with the following command: <strong>brew install libusb</strong></li>
    <li>Again using Homebrew, install git if you don't already have it installed. <strong>brew install git</strong></li>
</ol>

<h3>Ubuntu</h3>
<ol>
    <li>Install the Python OpenXC library using pip: <strong>pip install -U openxc</strong></li>
    <li>Install libusb from the main repository: <strong>sudo apt-get install libusb-1.0-0</strong></li>
</ol>
<h3>Arch Linux</h3>
<ol>
    <li>Install the Python OpenXC library using pip: <strong>pip install -U openxc</strong></li>
    <li>Install libusb via pacman: <strong>sudo pacman -S libusbx</strong></li>
</ol>    


<div class="page-header">
<h2>Next Steps</h2>
</div>

Once you have the library set up, you can start writing your [first OpenXC
app](/getting-started/tutorial.html). If you are having trouble, check out the
[troubleshooting](/getting-started/troubleshooting.html) steps.

[APK]: https://s3.amazonaws.com/openxcplatform.com/openxc-enabler-v3.0.apk
[openxc-android]: https://github.com/openxc/openxc-android
[enabler-source]: https://github.com/openxc/openxc-android/tree/master/enabler
